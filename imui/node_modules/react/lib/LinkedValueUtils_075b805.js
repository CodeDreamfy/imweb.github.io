define("node_modules/react/lib/LinkedValueUtils",function(require,exports,module){"use strict";function _assertSingleLink(inputProps){null!=inputProps.checkedLink&&null!=inputProps.valueLink?_prodInvariant("87"):void 0}function _assertValueLink(inputProps){_assertSingleLink(inputProps),null!=inputProps.value||null!=inputProps.onChange?_prodInvariant("88"):void 0}function _assertCheckedLink(inputProps){_assertSingleLink(inputProps),null!=inputProps.checked||null!=inputProps.onChange?_prodInvariant("89"):void 0}function getDeclarationErrorAddendum(owner){if(owner){var name=owner.getName();if(name)return" Check the render method of `"+name+"`."}return""}var _prodInvariant=require("node_modules/react/lib/reactProdInvariant"),ReactPropTypes=require("node_modules/react/lib/ReactPropTypes"),ReactPropTypeLocations=require("node_modules/react/lib/ReactPropTypeLocations"),hasReadOnlyValue=(require("node_modules/fbjs/lib/invariant"),require("node_modules/fbjs/lib/warning"),{button:!0,checkbox:!0,image:!0,hidden:!0,radio:!0,reset:!0,submit:!0}),propTypes={value:function(props,propName){return!props[propName]||hasReadOnlyValue[props.type]||props.onChange||props.readOnly||props.disabled?null:new Error("You provided a `value` prop to a form field without an `onChange` handler. This will render a read-only field. If the field should be mutable use `defaultValue`. Otherwise, set either `onChange` or `readOnly`.")},checked:function(props,propName){return!props[propName]||props.onChange||props.readOnly||props.disabled?null:new Error("You provided a `checked` prop to a form field without an `onChange` handler. This will render a read-only field. If the field should be mutable use `defaultChecked`. Otherwise, set either `onChange` or `readOnly`.")},onChange:ReactPropTypes.func},loggedTypeFailures={},LinkedValueUtils={checkPropTypes:function(tagName,props,owner){for(var propName in propTypes){if(propTypes.hasOwnProperty(propName))var error=propTypes[propName](props,propName,tagName,ReactPropTypeLocations.prop);if(error instanceof Error&&!(error.message in loggedTypeFailures)){loggedTypeFailures[error.message]=!0;{getDeclarationErrorAddendum(owner)}}}},getValue:function(inputProps){return inputProps.valueLink?(_assertValueLink(inputProps),inputProps.valueLink.value):inputProps.value},getChecked:function(inputProps){return inputProps.checkedLink?(_assertCheckedLink(inputProps),inputProps.checkedLink.value):inputProps.checked},executeOnChange:function(inputProps,event){return inputProps.valueLink?(_assertValueLink(inputProps),inputProps.valueLink.requestChange(event.target.value)):inputProps.checkedLink?(_assertCheckedLink(inputProps),inputProps.checkedLink.requestChange(event.target.checked)):inputProps.onChange?inputProps.onChange.call(void 0,event):void 0}};module.exports=LinkedValueUtils});