{"version":3,"sources":["Page.jsx"],"names":[],"mappings":"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","file":"Page.jsx","sourcesContent":["import React from 'react';\r\nimport classnames from 'classnames';\r\nimport Button from '../../button/index';\r\nimport Icon from '../../icon/index';\r\n\r\n/**\r\n * 翻页组件\r\n * 如果页数太大，会有一部分被隐藏，但是第一页和对后一个一直都会显示。中间会显示当前选中页和当前选中页附近的页\r\n * 从1开始计数\r\n */\r\nclass Page extends React.Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.prevOnClick = this.prevOnClick.bind(this);\r\n    this.nextOnClick = this.nextOnClick.bind(this);\r\n    this.goPage = this.goPage.bind(this);\r\n    this.state = {\r\n      // 当前选中页\r\n      currentPage: 0,\r\n      // 要显示在中间的按钮列表\r\n      displayBtnList: []\r\n    };\r\n  }\r\n\r\n  render() {\r\n    const { totalPage, size } = this.props;\r\n    const { currentPage, displayBtnList } = this.state;\r\n    let classes = classnames({\r\n      'im-page': true\r\n    });\r\n    return (\r\n      <div className={classes}>\r\n        <Button\r\n          color=\"weak\"\r\n          size={size}\r\n          disabled={currentPage <= 1}\r\n          onClick={currentPage <= 1 ? null : this.prevOnClick}\r\n        ><Icon\r\n          type=\"v-left\"\r\n        />\r\n        </Button>\r\n        {displayBtnList}\r\n        <Button\r\n          color=\"weak\"\r\n          size={size}\r\n          disabled={currentPage >= totalPage}\r\n          onClick={currentPage >= totalPage ? null : this.nextOnClick}\r\n        ><Icon\r\n          type=\"v-right\"\r\n        />\r\n        </Button>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  componentDidMount() {\r\n    const { defaultPage } = this.props;\r\n    this.goPage(defaultPage);\r\n  }\r\n\r\n  prevOnClick() {\r\n    this.goPage(this.state.currentPage - 1);\r\n  }\r\n\r\n  nextOnClick() {\r\n    this.goPage(this.state.currentPage + 1);\r\n  }\r\n\r\n  /**\r\n   * 切换到pageNum页\r\n   * @param pageNum\r\n   */\r\n  goPage(pageNum) {\r\n    const self = this;\r\n    const { onChange, size, maxDisplayNumber, totalPage } = this.props;\r\n    let { currentPage } = this.state;\r\n    let displayBtnList = [];\r\n    // 往要显示在中间的按钮列表添加一个元素\r\n    function pushBtn(btnIndex) {\r\n      displayBtnList.push(\r\n        <Button\r\n          key={btnIndex}\r\n          size={size}\r\n          color={btnIndex === pageNum ? 'default' : 'weak'}\r\n          onClick={() => self.goPage(btnIndex)}\r\n        >{btnIndex}</Button>\r\n      );\r\n    }\r\n\r\n    // page 为1的按钮一直都要显示\r\n    if (pageNum !== 1) {\r\n      pushBtn(1);\r\n    }\r\n    let step = Math.floor((maxDisplayNumber - 2) / 2);\r\n    let startIndex = pageNum - step;\r\n    if (startIndex < 2) {\r\n      startIndex = 2;\r\n    }\r\n    let endIndex = pageNum + (maxDisplayNumber - 2 - step);\r\n    if (endIndex > totalPage - 1) {\r\n      endIndex = totalPage - 1;\r\n    }\r\n    // 中间是否被隐藏了翻页按钮 隐藏的部分显示为...\r\n    if (startIndex > 2) {\r\n      displayBtnList.push(<span key=\"<\">...</span>);\r\n    }\r\n    for (let i = startIndex; i < pageNum; i++) {\r\n      pushBtn(i);\r\n    }\r\n    for (let i = pageNum; i <= endIndex; i++) {\r\n      pushBtn(i);\r\n    }\r\n    // 中间是否被隐藏了翻页按钮 隐藏的部分显示为...\r\n    if (endIndex < totalPage - 1) {\r\n      displayBtnList.push(<span key=\">\">...</span>);\r\n    }\r\n    // 最后一页的按钮必须显示\r\n    pushBtn(totalPage);\r\n\r\n    this.setState({\r\n      currentPage: pageNum,\r\n      displayBtnList\r\n    });\r\n    if (onChange != null) {\r\n      onChange(pageNum, currentPage);\r\n    }\r\n  }\r\n}\r\n\r\nPage.propTypes = {\r\n  /**\r\n   * 总页数 从1开始计数\r\n   */\r\n  totalPage: React.PropTypes.number.isRequired,\r\n  /**\r\n   * 默认选中页 从1开始计数\r\n   */\r\n  defaultPage: React.PropTypes.number,\r\n  /**\r\n   * 最大显示的分页按钮的数量,多余这个数量的按钮将被隐藏\r\n   * 在有很多页时会显示所有页，所以需要设置一个最大显示多少页。\r\n   */\r\n  maxDisplayNumber: React.PropTypes.number,\r\n  /**\r\n   * 当用户翻页时调用 callback(当前点击页,在点击前选中当页)\r\n   * 注意：从1开始计数\r\n   */\r\n  onChange: React.PropTypes.func,\r\n  size: React.PropTypes.oneOf(['l', 'm', 's'])\r\n};\r\n\r\nPage.defaultProps = {\r\n  defaultPage: 1,\r\n  maxDisplayNumber: 6\r\n};\r\n\r\nexport default Page;\r\n"]}