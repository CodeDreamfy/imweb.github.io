{"version":3,"sources":["Dialog.jsx"],"names":[],"mappings":";;;;;;;;;;AAMA;;;;AACA;;;;;;;;+eAPA;;;;;;IASM,M;;;AACJ,kBAAY,KAAZ,EAAmB;AAAA;;AAAA,0FACX,KADW;;AAGjB,UAAK,WAAL,GAAmB,MAAK,WAAL,CAAiB,IAAjB,OAAnB;AACA,UAAK,OAAL,GAAe,MAAK,OAAL,CAAa,IAAb,OAAf;AAJiB;AAKlB;;;;gCAGW,O,EAAS;AACnB,UAAM,OAAO,SAAS,IAAtB;;AAEA,UAAI,+BAAoB,OAAxB,EAAiC;AAC/B,aAAK,KAAL,CAAW,YAAX,GAA6B,8BAA7B;AACA,aAAK,KAAL,CAAW,QAAX,GAAsB,QAAtB;AACD,OAHD,MAGO;AACL,aAAK,KAAL,CAAW,YAAX,GAA0B,EAA1B;AACA,aAAK,KAAL,CAAW,QAAX,GAAsB,MAAtB;AACD;AACF;;;8BAES;AACR,UAAI,KAAK,KAAL,CAAW,aAAX,OAA+B,KAAnC,EAA0C;AACxC;AACA,aAAK,KAAL,CAAW,OAAX;AACD;AACF;;;4BAEO,M,EAAQ,M,EAAQ;AACtB,aAAO,SAAS,uCAAK,WAAU,gBAAf,EAAgC,OAAO;AACrD;AADqD,SAAvC,GAAT,GAEK,EAFZ;AAGD;;;8BAES,K,EAAO,S,EAAW;AAC1B,aAAO,QAAQ;AAAA;AAAA,UAAK,WAAU,cAAf;AACb;AAAA;AAAA,YAAI,WAAU,mBAAd;AAAmC;AAAnC,SADa;AAEZ,oBAAY;AAAA;AAAA,YAAG,SAAS,KAAK,OAAjB,EAA0B,WAAU,oBAApC;AAAA;AAAA,SAAZ,GAA6E;AAFjE,OAAR,GAGE,EAHT;AAID;;;6BAEQ;AAAA,mBAC4D,KAAK,KADjE;AAAA,UACC,IADD,UACC,IADD;AAAA,UACO,KADP,UACO,KADP;AAAA,UACc,KADd,UACc,KADd;AAAA,UACqB,MADrB,UACqB,MADrB;AAAA,UAC6B,OAD7B,UAC6B,OAD7B;AAAA,UACsC,MADtC,UACsC,MADtC;AAAA,UAC8C,SAD9C,UAC8C,SAD9C;;;AAGP,WAAK,WAAL,CAAiB,OAAjB;;AAEA,aAAO,UACL;AAAA;AAAA;AACG,aAAK,OAAL,CAAa,IAAb,EAAmB,MAAnB,CADH;AAEE;AAAA;AAAA,YAAK,WAAU,gBAAf,EAAgC,OAAO;AACrC,sBAAQ,SAAS;AADoB,aAAvC;AAGE;AAAA;AAAA,cAAK,WAAU,WAAf,EAA2B,OAAO;AAChC;AADgC,eAAlC;AAGG,iBAAK,SAAL,CAAe,KAAf,EAAsB,SAAtB,CAHH;AAIE;AAAA;AAAA,gBAAK,WAAU,cAAf;AACG,mBAAK,KAAL,CAAW;AADd,aAJF;AAOE;AAAA;AAAA,gBAAK,WAAU,cAAf;AAA+B;AAA/B;AAPF;AAHF;AAFF,OADK,GAiBH,IAjBJ;AAkBD;;;;;;kBAGY,M","file":"Dialog.jsx","sourcesContent":["/**\n * imui.Dialog\n * @author jero\n * @date 2016-07-28\n */\n\nimport React, { Component } from 'react';\nimport { getScrollBarWidth, checkScrollbar } from './util';\n\nclass Dialog extends Component {\n  constructor(props) {\n    super(props);\n\n    this.parseScroll = this.parseScroll.bind(this);\n    this.onClose = this.onClose.bind(this);\n  }\n\n\n  parseScroll(visible) {\n    const body = document.body;\n\n    if (checkScrollbar() && visible) {\n      body.style.paddingRight = `${getScrollBarWidth()}px`;\n      body.style.overflow = 'hidden';\n    } else {\n      body.style.paddingRight = '';\n      body.style.overflow = 'auto';\n    }\n  }\n\n  onClose() {\n    if (this.props.onBeforeClose() !== false) {\n      // this.parseScroll(false);\n      this.props.onClose();\n    }\n  }\n\n  getMask(isMask, zIndex) {\n    return isMask ? <div className=\"im-dialog-mask\" style={{\n      zIndex\n    }}></div> : '';\n  }\n\n  getHeader(title, closeable) {\n    return title ? <div className=\"im-dialog-hd\">\n      <h3 className=\"im-dialog-hd-text\">{title}</h3>\n      {closeable ? <a onClick={this.onClose} className=\"im-dialog-hd-close\">Ã—</a> : ''}\n    </div> : '';\n  }\n\n  render() {\n    const { mask, width, title, zIndex, visible, button, closeable } = this.props;\n\n    this.parseScroll(visible);\n\n    return visible ? (\n      <div>\n        {this.getMask(mask, zIndex)}\n        <div className=\"im-dialog-wrap\" style={{\n          zIndex: zIndex + 1\n        }}>\n          <div className=\"im-dialog\" style={{\n            width\n          }}>\n            {this.getHeader(title, closeable)}\n            <div className=\"im-dialog-bd\">\n              {this.props.children}\n            </div>\n            <div className=\"im-dialog-ft\">{button}</div>\n          </div>\n        </div>\n      </div>\n    ) : null;\n  }\n}\n\nexport default Dialog;\n"]}