{"version":3,"sources":["Dropdown.jsx"],"names":[],"mappings":"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","file":"Dropdown.jsx","sourcesContent":["import React from 'react';\r\nimport Icon from '../../icon/index';\r\n\r\n/**\r\n * 分页组件\r\n */\r\nclass Dropdown extends React.Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.onSearch = this.onSearch.bind(this);\r\n    this.toggleDropdown = this.toggleDropdown.bind(this);\r\n    this.closeDropdown = this.closeDropdown.bind(this);\r\n    this.showDropdown = this.showDropdown.bind(this);\r\n    this.cleanValue = this.cleanValue.bind(this);\r\n    let { options, defaultOption } = this.props;\r\n    this.state = {\r\n      // 当前选中\r\n      selectedOption: defaultOption,\r\n      // 搜索关键字\r\n      searchKeyword: defaultOption == null ? '' : defaultOption.name,\r\n      // 当前是否正在选择中\r\n      showDropdown: false,\r\n      // 需要展示出的options\r\n      visibleOptions: options == null ? [] : options,\r\n    };\r\n  }\r\n\r\n  componentWillReceiveProps(nextProps) {\r\n    let { options, defaultOption } = nextProps;\r\n    this.setState({\r\n      selectedOption: defaultOption,\r\n      searchKeyword: defaultOption == null ? '' : defaultOption.name,\r\n      visibleOptions: options == null ? [] : options,\r\n    });\r\n  }\r\n\r\n  render() {\r\n    const { searchable, hoverable, options, placeholder, cleanable, noBorder, ...others } = this.props;\r\n    delete others.defaultOption;\r\n    let { selectedOption, searchKeyword, showDropdown, visibleOptions } = this.state;\r\n    // 主体显示的类容\r\n    let wrapContentElement;\r\n    if (options == null) {\r\n      // 加载中\r\n      // TODO 换成loading组件\r\n      wrapContentElement = <div className=\"im-dropdown-wrap-loading\">加载中...</div>;\r\n    } else if (searchable) {\r\n      // 可以搜索\r\n      wrapContentElement = (<input\r\n        className=\"im-dropdown-wrap-text\"\r\n        type=\"text\" value={searchKeyword}\r\n        placeholder={placeholder}\r\n        onChange={this.onSearch}\r\n      />);\r\n    } else {\r\n      // 直接显示文字\r\n      wrapContentElement =\r\n        (<div className=\"im-dropdown-wrap-text\">\r\n          {selectedOption != null ? selectedOption.name :\r\n            <span className=\"im-dropdown-wrap-text-placeholder\">{placeholder}</span>}\r\n        </div>);\r\n    }\r\n\r\n    return (\r\n      <div className=\"im-dropdown\" onMouseLeave={this.closeDropdown} {...others}>\r\n        <div\r\n          className=\"im-dropdown-wrap\"\r\n          onClick={this.toggleDropdown}\r\n          onMouseEnter={hoverable ? this.showDropdown : null}\r\n          style={noBorder ? { border: 'none' } : null}\r\n        >{wrapContentElement}\r\n          {cleanable ? <Icon\r\n            className=\"clean-icon\"\r\n            type=\"close\"\r\n            onClick={this.cleanValue}\r\n          /> : null}\r\n          <Icon\r\n            type=\"v-bottom\"\r\n          />\r\n        </div>\r\n        {visibleOptions.length > 0 ?\r\n          <div className=\"im-dropdown-dropdown\" style={{ display: showDropdown ? 'block' : 'none' }}>\r\n            <ul>\r\n              {visibleOptions.map(option => <li\r\n                value={option.value}\r\n                key={option.value}\r\n                onClick={() => this.onSelect(option)}\r\n              >{option.element == null ? option.name : option.element}\r\n              </li>)}\r\n            </ul>\r\n          </div> : null\r\n        }\r\n      </div>\r\n    );\r\n  }\r\n\r\n  onSelect(option) {\r\n    const { onChange } = this.props;\r\n    if (onChange) {\r\n      onChange(option, this.state.selectedOption);\r\n    }\r\n    this.setState({\r\n      selectedOption: option,\r\n      searchKeyword: option.name\r\n    });\r\n    this.closeDropdown();\r\n  }\r\n\r\n  onSearch(event) {\r\n    let searchKeyword = event.currentTarget.value;\r\n    const { options } = this.props;\r\n    let visibleOptions = [];\r\n    if (searchKeyword.length > 0) {\r\n      options.forEach(option => {\r\n        if (option.name.indexOf(searchKeyword) >= 0) {\r\n          visibleOptions.push(option);\r\n        }\r\n      });\r\n    } else {\r\n      visibleOptions = options;\r\n    }\r\n    this.setState({\r\n      showDropdown: true,\r\n      searchKeyword,\r\n      visibleOptions\r\n    });\r\n  }\r\n\r\n  toggleDropdown() {\r\n    const showDropdown = this.state.showDropdown;\r\n    if (showDropdown === false) {\r\n      this.showDropdown();\r\n    } else {\r\n      this.closeDropdown();\r\n    }\r\n  }\r\n\r\n  showDropdown() {\r\n    this.setState({\r\n      showDropdown: true\r\n    });\r\n  }\r\n\r\n  closeDropdown() {\r\n    this.setState({\r\n      showDropdown: false\r\n    });\r\n  }\r\n\r\n  cleanValue(event) {\r\n    event.stopPropagation();\r\n    this.setState({\r\n      selectedOption: null\r\n    });\r\n  }\r\n}\r\n\r\nconst OptionShape = React.PropTypes.shape({\r\n  /**\r\n   * 选项显示名称\r\n   */\r\n  name: React.PropTypes.any.isRequired,\r\n  /**\r\n   * 选项值\r\n   */\r\n  value: React.PropTypes.any.isRequired,\r\n  /**\r\n   * 如果该属性不为空，将把这个元素显示在选项列表里\r\n   * 如果该属性为空，将把name属性作为显示文字\r\n   */\r\n  element: React.PropTypes.element\r\n});\r\nDropdown.propTypes = {\r\n  /**\r\n   * 是否可以启用文字输入框搜索选项\r\n   */\r\n  searchable: React.PropTypes.bool,\r\n  /**\r\n   * 当hover时是否展示下拉\r\n   */\r\n  hoverable: React.PropTypes.bool,\r\n  /**\r\n   * 下拉列表所有选项数据\r\n   */\r\n  options: React.PropTypes.arrayOf(OptionShape),\r\n  /**\r\n   * 默认选中的选项的值\r\n   */\r\n  defaultOption: OptionShape,\r\n  /**\r\n   * 当选中的值发生变化时调用\r\n   * callback(newValue,oldValue)\r\n   */\r\n  onChange: React.PropTypes.func,\r\n  /**\r\n   * placeholder 提示\r\n   */\r\n  placeholder: React.PropTypes.string,\r\n  /**\r\n   * 是否可以清除dropdown所选的值，让它不选择任何一个\r\n   */\r\n  cleanable: React.PropTypes.bool,\r\n  /**\r\n   * 是否要隐藏边框\r\n   */\r\n  noBorder: React.PropTypes.bool\r\n};\r\n\r\nDropdown.defaultProps = {\r\n  cleanable: false,\r\n  noBorder: false\r\n};\r\n\r\nexport default Dropdown;\r\n"]}